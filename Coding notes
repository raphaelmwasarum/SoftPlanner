# Introduction to Semantic Versioning \[SemVer\]

Semantic versioning is a versioning system for software. Semantic
Versioning is a 3-component number in the format of X.Y.Z, where :

* X stands for a major version.
* Y stands for a minor version.
* Z stands for a patch.

So, SemVer is of the form Major.Minor.Patch.

<ul></ul>

### *** Starting with this project going forward \[SemVer\] will be my new versioning system ***

<ul></ul>

SemVer brings some sanity to the management of rapidly moving software
release targets. As discussed above, 3 numbers i.e, Major, Minor and
Patch are required to identify a software version. For example, if we
take version 5.12.2, then it has a major version of 5, a minor version
of 12 and a patch version of 2. Below given are the scenarios when you
should bump the value of X, Y and Z.

* Bump the value of X when breaking the existing API.
* Bump the value of Y when implementing new features in a backward-
  compatible way.
* Bump the value of Z when fixing bugs.

Valid identifiers are in the set \[A-Za-z0-9\] and cannot be empty. Pre-
release metadata is identified by appending a hyphen to the end of the
SemVer sequence. Thus, a pre-release for version 1.0.0 could be 1.0.0-
alpha.1. If another build is needed, it would become 1.0.0-alpha.2, and
so on. Note that names cannot contain leading zeros, but hyphens are
allowed in names for pre-release identifiers.


## Advantages of SemVer

* You can keep track of every transition in the software development
  phase. Versioning can do the job of explaining the developers about
  what type of changes have taken place, and the possible updates that
  should take place in the software.
* It helps to keep things clean and meaningful.
* It helps other people who might be using your project as a dependency.

## Points to keep in mind

* The first version starts at **0.1.0** and not at **0.0.1**, as no bug
  fixes have taken place.
* We start off with a set of features as first draft of the project.
  Before 1.0.0 is only the Development Phase, where you focus on getting
  stuff done.
* SemVer does not cover libraries tagged **0.x.y.**
* The first stable version is **1.0.0.**












Root - The Main description of the app
Children - the various components of the app.


E.g.

1. Project Tree:

		AppTreeStructurePlanner ---> InputResolution. Maps input to the components that can process the input:
										- Adding a new project
										- Editing a project
										- Deleting a project
										- Showing all saved projects
										- Adding a component node
										- Editing a component node
										- Deleting a component node
										- Opening a project
										- Showing current project tree  
										- Showing current project schedule

								---> ProjectAddition
								---> ProjectModification
								---> ProjectRemoval
								---> ProjectAccess
								---> ComponentAddition
								---> ComponentModification
								---> ComponentRemoval
								---> TreeViewer. Shows the project tree
								---> Scheduler:
										- Adds a component to the schedule
										- Edits a component's place in the schedule
										- Removes a component from the schedule
										- Shows the project coding schedule

2. Entities:

	- Project
		- Name
		- ProjectRoot_ID

	- Component
		- Name
		- Description
		- PseudoCode
		- Parent_ID


3. Services

    - ConsoleInput
	- KeyGenerator
	- DataService
		- local (local repository) (default)
		- io (input output services)
		- web (web services)
	- Factories (encapsulated creation of components inside components)
	- Communication (facilitates decoupled communication among components as an alternative to Dependency Injection)

4. Process tree. Shows all the possible sequences of tasks that a user can go through in the app.

	input processing -->  Add new project
						- Show all projects
						- Open a project
							- Edit project
							- Show project tree
							- Show project schedule
							- Add new component
							- Open component
							    - Edit a component
							- Delete component(s)
						- Delete a project


						project add "Project data". Done.
						project list. Done.
						project open Project ID. Done.
						project current - shows the active open project. Done.
						project edit "Project data". Done.
						project delete Project ID. Done.
						project component list. Done.
						project component add <Component data> - adds a component to the project. Done.
						project component open <Component ID>
						project component current - shows the active open component.
						project component edit <Component data> - adds a component to the project
						project component delete <Component ID> - deletes a component from the current component.
						project component goto <Component ID> - traverses the entire project tree to find and open/select the component of the passed ID.
						project tree - prints the entire project tree.
						project component tree <nth generation before> <nth generation after> - prints the project tree from the nth generation before the current component to the nth generation after the current component, if they exist.
   						project schedule
						q
						help
						project help










